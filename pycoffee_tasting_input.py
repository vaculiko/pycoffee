import os
from tkinter.constants import CENTER
from types import resolve_bases
from warnings import resetwarnings
import pandas as pd
import PySimpleGUI as sg
from datetime import date
from pathlib import Path


"""
Windows Layout Explanation
--------------------------
Layout consists of graphic elements, input elements and buttons.
Graphic elements are frames and text headers. They look nice, but have zero effect on generated database

Input elements are separated into 3 categories:
- text inputs
- selection box
- slider

Text inputs utilize two lists of specific variables: keys and default text. They cover data about coffee
beans origins. Where they come from, who roasted them, what they are.
# Fields for text inputs are generated by function <BeansOrigin>, which is run for every <key> and <text>
  from special list [(Key, text),(Key, text),...]. This "special list" is generated for first all entries 
  from lists <keys> and <def_txs>.
# Results are 5 text input fields for each specific key and individual default text is visible in each field.
  Column element is used in layout specification for text input fields, because Frame element has issues
  with generated content. If Frame is ever removed, Column can be removed, too. (Functionality already tested.)

Selection box for Roasting Level indication uses Spin element.
# Known issue: default value is actually an independent string. Even with selection range 1-5 and specification of 
               the default value to 3, the next spin down will take user to value 1, the next spin up to value 2.
               Visible default value is just plain text, can be anything, while real starting value is remains 1.

Slider is used for measuring ration between Arabica and Robusta component in used coffee beans.
# Numerical counters are configured to start at 0 on Robusta side and 100 on Arabica side. Default avlue for slider
  is 100 and graphically matches Arabica side. Slider can be moved in range 0-100 by steps of 5.
  Counters are modified by events in slider changes. With every step of slider the value of counter is increased 
  or decreased. On Robusta side the value is '100-SliderValue', on Arabica side value is simply equal to SliderValue.
  
Buttons are specified for either submiting of inputs & continuation to the next page, or returning to previous page.
--------------------------
ToDo:
# List comprehension na if loop mazání default textu
# Přidat pamatování si předchozích textových inputů, když uživatel rozklikne, nabídne se mu, co psal dříve. Třeba 5 nejčastějších.
# Vyrobit akci na tlačítku Zpět :D
# Do okna s Recepty vložit "BrewingMethod", "BrewingRecipe", nebo vymyslet, kam to dát
# Login okno (Talon už na tom dělá)
# Tasting okno má prozatím obsahovat "Známka", "Acidita", "Zemitost", "Intenzita", "Sladkost", "Poznámka"
"""

# ------ Database Definition ------ #
# Entry info: date, user
# Bean info: Country, Name, Roaster, Processing, Roast Level, Type, Variety, Brewing Method, Brewing Recipe
cols = ["Date", "User", "Country", "Name", "Roaster",
        "Processing", "RoastLevel", "Type", "Variety"]
df = pd.DataFrame(columns=cols)  # Initialize dataframe

username = 'TestGUI_2.8'

# ------ Menu Definition ------ #
menu_def = [['&Account', ['&Open', '&Save', 'E&xit', 'Properties']],
            ['&History', ['Paste', ['Special', 'Normal', ], 'Undo'], ],
            ['&Help', '&About...'], ]

# ------ Global definitions ------ #
sg.theme('DarkAmber')
base_font = ('Any 15')
base_align = 'center'   # For justification parameter governing horizontal alignment of elements

# ---- Function for generating text inputs & enabling of easy formatting for Beans Origin section ---- #
def BeansOrigin(key_sp, def_text):
    return [sg.Input(key=key_sp,
                     default_text=def_text,
                     size=(30, 1),              # Size of the text input field
                     font=('Any 15'),
                     justification='center')]   # Alignment of text in the input field

# -- Lists of keys and defaults text for text input fields for Beans Origin section -- #
keys=['Country','Name','Roaster','Processing','Variety']
def_txs=["Země - Kenya, Brazil...",
         "Jméno - Kiwami, Diamond...",
         "Pražírna - Motmot, Father's...",
         "Zpracování - natural, washed...",
         "Odrůda - Heirloom, Tabi..."]


# --- Spin input --- #
spininput_size = (29, 1)
# --- Slider input --- #
# Size of the actual slider in characters, first number is width, second number is high
sliderinput_size = (38, 20)
slidertext_size = (7, 1)      # Size of text above the slider
slidercount_size = (4, 1)     # Size of counters of current value on slider

# Buttons
buttons = [sg.Button(button_text='Jde se ochutnávat!',
                     tooltip='Kliknutím přejdeš na známkování chuti', font=base_font),
           sg.Button(button_text='Zpět',
                     tooltip='Kliknutím se vrátíš na login', font=base_font)]

# ------ "Beans" Layout Definition ------ #
layoutBeans = [
    # ---- Menu, for future use, momentarily just for show ---- #
    [sg.Menu(menu_def, tearoff=True)],
    
    # ---- Fancy frame and title ---- #
    [sg.Frame('', layout=[
     [sg.Text('Zrno', font=base_font)],
     
     # ---- Generated "Beans Origin" text input fields: ---- #
     [sg.Column(layout=[BeansOrigin(key_sp,def_text) for key_sp,def_text in [(keys[i],def_txs[i]) for i in range(len(keys))]])],
                      
     # ---- Beans processing details ---- #
     # -- Spin selection box for Roasting Levels -- *
     [sg.Spin(
         key='RoastLevel',
         values=[
             '      1 Světlé pražení',
             '      2 Světlejší pražení',
             '      3 Střední pražení',
             '      4 Tmavší pražení',
             '      5 Tmavé pražení'],
         initial_value='      3 Střední pražení',
         size=spininput_size,
         font=base_font)],
     # -- Slider with Arabica/Robusta ratio -- *
     [sg.Text('0', key='_LEFT_', size=slidercount_size, font=base_font),                     # Robusta counter
      sg.Text('Robusta', size=slidertext_size, font=base_font,                               # Robusta name
              justification=base_align),
      sg.Text('Arabica', size=slidertext_size, font=base_font,                               # Arabica name
              justification=base_align),
      sg.Text('100', key='_RIGHT_', size=slidercount_size, font=base_font)],                 # Arabica counter
     [sg.Slider(key='Type', range=(0, 100), resolution=5, orientation='h',
                disable_number_display=True, default_value=100, font=base_font, enable_events=True)],
     
     # ---- Fancy frame ends here ---- #
     ], element_justification='center')],
    
    # ---- Buttons to submit and go for the next page OR return back---- #
    [sg.Column([buttons], justification=base_align)]]



# ------ "Recepty" Layout Definition ------ #
# Currently unused, will be transfered to another file
layoutRecepy = [
    [sg.Input(default_text="Způsob přípravy - espresso, V60...",
              key='BrewingMethod', size=(30, 20))],
    [sg.Input(default_text="Recept příprav - inverted aeropress, ristretto...",
              key='BrewingRecipe', size=(30, 20))],
]


# ------ Create the window ------ #
windowBeans = sg.Window("PyCoffee", layoutBeans, margins=(
    5, 5), no_titlebar=False, finalize=True)

# ------ Binding <focus> events from thinker on PySimpleGUI "Beans Origins" text inputs ------ #
# Blocks any Focus on the window opening, so the first click also clears default text
windowBeans['Country'].block_focus(block=True)
# Binds generation of Focus events on text inputs field generated from list <keys>
[windowBeans[key].bind('<FocusIn>', '+FOCUS IN+') for key in keys]


# ------ Create an event loop ------ #
while True:
    event, values = windowBeans.read()
   # If Arabica/Robusta slider is used, modify values of Arabica/Robusta counters, respectively
    if event == 'Type':
        windowBeans.Element('_LEFT_').Update(100-int(values['Type']))
        windowBeans.Element('_RIGHT_').Update(int(values['Type']))
    # Clear default text if the text input field is focused
    if event == 'Country+FOCUS IN+' and values['Country'] == "Země - Kenya, Brazil...":
        windowBeans['Country'].update('')
    if event == 'Name+FOCUS IN+' and values['Name'] == "Jméno - Kiwami, Diamond...":
        windowBeans['Name'].update('')
    if event == 'Roaster+FOCUS IN+' and values['Roaster'] == "Pražírna - Motmot, Father's...":
        windowBeans['Roaster'].update('')
    if event == 'Processing+FOCUS IN+' and values['Processing'] == "Zpracování - natural, washed...":
        windowBeans['Processing'].update('')
    if event == 'Variety+FOCUS IN+' and values['Variety'] == "Odrůda - Heirloom, Tabi...":
        windowBeans['Variety'].update('')
    # If User presses the "Jde se ochutnávat!" button, open next Windows
    if event in ("Jde se ochutnávat!", sg.WIN_CLOSED, 'Exit'):
        print(values)
        break
    # End program if User closes window
    if event in (sg.WIN_CLOSED, 'Exit'):
        break

windowBeans.close()


# ------ Console input for tasting info ------ #
def input_tasting():
    row_dict = {}
    for col in cols:
        if col == "Date":     # Autofill date
            row_dict[col] = date.today()
        elif col == "User":   # Autofill username
            row_dict[col] = username
        elif col == "Type":   # Type has integer value and cannot be uppercased            
            row_dict[col] = values[col]
        else:                 # Make all inputs start with uppercase            
            row_dict[col] = values[col].title()
    return row_dict


# Manual input
new_row = input_tasting()  # Generate dictionary
# Add dictionary as new line to database
df = df.append(new_row, ignore_index=True)

# Create data directory
Path('data').mkdir(parents=True, exist_ok=True)
# Creates file with headers, if it does not exist; if it exists, it appends new data without headers
file = 'data/pycoffee-' + username + '.csv'
hdr = False if os.path.isfile(file) else True
df.to_csv(file, mode='a', index=False, header=hdr)
print(df)