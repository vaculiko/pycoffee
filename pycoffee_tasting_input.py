import os
from tkinter.constants import CENTER
from types import resolve_bases
from warnings import resetwarnings
import pandas as pd
import PySimpleGUI as sg
from datetime import date
from pathlib import Path


"""
Windows Layout Explanation
--------------------------
Layout consists of graphic elements, input elements and buttons.
Graphic elements are frames and text headers. They look nice, but have zero effect on generated database.

Input elements are separated into 3 categories:
- text inputs
- selection box
- slider

Text inputs utilize two lists of specific variables: keys and default text. They cover data about coffee
beans origins. Where they come from, who roasted them, what they are.
# Fields for text inputs are generated by function <BeansOrigin>, which is run for every <key> and <text>
  from special list [(Key, text),(Key, text),...]. This "special list" is generated for first all entries 
  from lists <keys> and <def_txs>.
# Results are 5 text input fields for each specific key and individual default text is visible in each field.
  Column element is used in layout specification for text input fields, because Frame element has issues
  with generated content. If Frame is ever removed, Column can be removed, too. (Functionality already tested.)

Selection box for Roasting Level indication uses Spin element.
# Known issue: default value is actually an independent string. Even with selection range 1-5 and specification of 
               the default value to 3, the next spin down will take user to value 1, the next spin up to value 2.
               Visible default value is just plain text, can be anything, while real starting value is remains 1.

Slider is used for measuring ration between Arabica and Robusta component in used coffee beans.
# Numerical counters are configured to start at 0 on Robusta side and 100 on Arabica side.
# Default value for slider is 100 and graphically matches Arabica side.
# Slider can be moved in range 0-100 by steps of 5.
# Counters are modified by events from slider changes. With every step of slider-movement, the value of counter is
  increased or decreased. On Robusta the value is '100-SliderValue', on Arabica value is simply equal to SliderValue.
  
There are currently two buttons:
# Button to submit inputs & continue to the next page.
# Button to returning to the previous page.
--------------------------
ToDo:
# Přidat pamatování si předchozích textových inputů, když uživatel rozklikne, nabídne se mu, co psal dříve. Třeba 5 nejčastějších.
# Vyrobit akci na tlačítku Zpět :D
# Tasting okno má prozatím obsahovat "Známka", "Acidita", "Zemitost", "Intenzita", "Sladkost", "Poznámka"
"""


def main(username='TestGUI_3.4', screen_size=(300, 600)):
    # ------ Database Definition ------ #
    # Entry info: date, user
    # Bean info: Country, Name, Roaster, Processing, Roast Level, Type, Variety, Brewing Method, Brewing Recipe
    cols = ["Date", "User", "Country", "Name", "Roaster",
            "Processing", "Variety", "RoastLevel", "Type"]
    df = pd.DataFrame(columns=cols)  # Initialize dataframe

    # ------ Menu Definition ------ #
    menu_def = [['&Account', ['&Open', '&Save', 'E&xit', 'Properties']],
                ['&History', ['Paste', ['Special', 'Normal', ], 'Undo'], ],
                ['&Help', '&About...'], ]

    # ------ Global definitions ------ #
    sg.theme('DarkAmber')
    base_font = ('Any 15')
    base_align = 'center'   # For justification parameter = horizontal alignment of elements

    # ---- Function for generating text inputs & enabling of easy formatting for Beans Origin section ---- #
    def BeansOrigin(key_sp, def_text):
        return [sg.Input(key=key_sp,
                         default_text=def_text,
                         tooltip=def_text[:def_text.index(' ')],
                         # Size of the text input field
                         size=(30, 1),
                         font=('Any 15'),
                         justification='center',     # Alignment of text in the input field
                         pad=((0, 0), (10, 10)),
                         border_width=10)]

    # -- Lists of keys and defaults text for text input fields for Beans Origin section -- #
    keys = ['Country', 'Name', 'Roaster', 'Processing', 'Variety']
    def_txs = ["Země - Kenya, Brazil...",
               "Jméno - Kiwami, Diamond...",
               "Pražírna - Motmot, Father's...",
               "Zpracování - natural, washed...",
               "Odrůda - Heirloom, Tabi..."]

    # ---- Buttons ---- #
    buttons = [[sg.Button(button_text='Jde se ochutnávat!', key='Next', auto_size_button=None,
                     tooltip='Kliknutím přejdeš na známkování chuti', font=('Any 24'),
                     mouseover_colors=('sienna1','OrangeRed4') )],
           [sg.Button(button_text='Zpět', bind_return_key=True, key='Back',
                     tooltip='Kliknutím se vrátíš na login', font=base_font,
                     mouseover_colors=('sienna1','OrangeRed4'))]]

    # ------ "Beans" Layout Definition ------ #
    layoutBeans = [
        # ---- Menu, for future use, momentarily just for show ---- #
        [sg.Menu(menu_def, tearoff=True)],

        # ---- Fancy frame and title ---- #
        [sg.Frame('', layout=[
            [sg.Text('Zrno', font=base_font)], 

            # ---- Generated "Beans Origin" text input fields: ---- #
            [sg.Column(layout=[BeansOrigin(key_sp, def_text) for key_sp, def_text in [
                       (keys[i], def_txs[i]) for i in range(len(keys))]])],

            # ---- Beans processing details ---- #
            # -- Spin selection box for Roasting Levels -- *
            [sg.Spin(
                key='RoastLevel',
                values=[
                    '               Světlé pražení',
                    '               Polosvětlé pražení',
                    '               Střední pražení',
                    '               Polotmavé pražení',
                    '               Tmavé pražení'],
                initial_value='               Střední pražení',
                font=base_font,
                pad=((5, 5), (10, 10)))],
            # -- Slider with Arabica/Robusta ratio -- *
            [sg.Text('0', key='_LEFT_', font=base_font),                     # Robusta counter
             sg.Text('Robusta', font=base_font, key='Robusta',               # Robusta name
                     justification='left'),
             sg.Text('Arabica', font=base_font, key='Arabica',               # Arabica name
                     justification='right'),
             sg.Text('100', key='_RIGHT_', font=base_font)],                 # Arabica counter
            [sg.Slider(key='Type', range=(0, 100), resolution=5, orientation='h',
                       disable_number_display=True, default_value=100, font=base_font, enable_events=True,
                       border_width=2,
                       relief='ridge',
                       background_color='OrangeRed4',
                       trough_color='sienna1')],

            # ---- Fancy frame ends here ---- #
        ], element_justification='center')],

        # ---- Buttons to submit and go for the next page OR return back---- #
        [sg.Column(buttons, justification=base_align, key='ColumnButtons', element_justification=base_align)]]

    # ------ Create the window ------ #
    windowBeans = sg.Window("PyCoffee", layoutBeans, margins=(
        5, 5), no_titlebar=False, finalize=True, size=screen_size)

    # ------ Focus Event Binding from Thinker on PySimpleGUI "Beans Origins" text inputs ------ #
    # Blocks any Focus on the window opening, so the first click also clears default text
    windowBeans[keys[0]].block_focus(block=True)
    # Binds generating of Focus Events on text input fields created from list <keys>
    [windowBeans[key].bind('<FocusIn>', '+FOCUS IN+') for key in keys]
    
    # ------ Expands Elements to fit the width of window ------ #
    [windowBeans[key].expand(expand_x = True) for key in ['Country','Name','Roaster', 'Robusta',
            'Arabica', 'Processing','Variety','Type','RoastLevel','ColumnButtons','Next','Back']]


    # ------ Create an event loop ------ #
    '''
    'Clear' For Loop Explanation
    -----------------
    <For loop> is used to check if any text input field was focused (selected by user).
    For every text input field there is a <key> matching entry from the list <keys>.
    For every text input field there is also <default text> in the text input field 
    (returned as <value> by window.read function) and it matches entry from the list
    <def_txs> on the same position as <key> in <keys>.
        # E.g. on the first position of <keys> there is 'Country', on first pozition of 
        <def_txs> there is "Země - Kenya, Brazil...".
        So the text input field with <key> 'Country' contains <default text> "Země - Kenya, Brazil...".

    <For loop> checks if for any <key> from <keys> the Focus Event was created (syntax is 
    <key+'+FOCUS IN+'> and it is generated by Focus Event Binding code above).
        # If such Focus event was created (user klicked on thetext input field) and <value> of 
        <key> (the text of the input field) matches entry from <def_txs> on the same position
        (matches default text given by code), that value (default text) is deleted.
    -----------------
    '''
    while True:
        event, values = windowBeans.read()
        # -- Clear default text of the text input field on Focus -- #
        for key in keys:
            if event == (key+'+FOCUS IN+') and values[key] == def_txs[keys.index(key)]:
                windowBeans[key].update('')
    # -- If Arabica/Robusta slider is used, modify values of Arabica/Robusta counters -- #
        if event == 'Type':
            windowBeans.Element('_LEFT_').Update(100-int(values['Type']))
            windowBeans.Element('_RIGHT_').Update(int(values['Type']))
        # -- If User presses the "Jde se ochutnávat!" button, open next Windows -- #
        if event in ('Next'):
            # print(values)
            break
        # -- End program if User closes window -- #
        if event in (sg.WIN_CLOSED, 'Exit', 'Back'):
            break

    windowBeans.close()

    # ------ Dataframe input for tasting info ------ #
    row_dict = {}
    for col in cols:
        if col == 'Date':     # Autofill date
            row_dict[col] = date.today()
        elif col == 'User':   # Autofill username
            row_dict[col] = username
        elif col == 'RoastLevel':
            row_dict[col] = values[col].lstrip()  # Remove trailing spaces
        elif col == 'Type':   # Type has integer value and cannot be uppercased
            row_dict[col] = values[col]
        else:                 # Make all inputs start with uppercase
            row_dict[col] = values[col].title()

    return row_dict # pass to next window, write to csv later
    '''
    # -- Generate dictionary and add it as new line to database-- #
    df = df.append(row_dict, ignore_index=True)
    # -- Create data directory -- #
    Path('data').mkdir(parents=True, exist_ok=True)
    # -- Create database file with headers -- #
    # -- If database file already exists, append new data without headers #
    file = 'data/pycoffee-' + username + '.csv'
    hdr = False if os.path.isfile(file) else True
    df.to_csv(file, mode='a', index=False, header=hdr)
    print(df)
    '''

if __name__ == "__main__":
    # execute only if launched from command line/opened directly
    main()
